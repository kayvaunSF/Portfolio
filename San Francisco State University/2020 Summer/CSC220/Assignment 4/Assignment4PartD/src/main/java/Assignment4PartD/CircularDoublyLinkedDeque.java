package Assignment4PartD;public class CircularDoublyLinkedDeque<T> implements DequeInterface<T> {    private class DoubleLinkedNode {       T data;       DoubleLinkedNode prev;       DoubleLinkedNode next;                     DoubleLinkedNode(T data){           this.data = data;           prev = null;           next = null;       } }       DoubleLinkedNode first;   int size;   CircularDoublyLinkedDeque(){       first = null;       size = 0;    }   @Override   public void addToFront(T newEntry) {       if (size == 0){           first = new DoubleLinkedNode(newEntry);           first.prev = first;                      first.next = first;       }       else {           DoubleLinkedNode node = new DoubleLinkedNode(newEntry);           node.next = first;           node.prev = first.prev;           first.prev.next = node;           first = node;       }       size++;    }   @Override   public void addToBack(T newEntry) {       if (size == 0){           first = new DoubleLinkedNode(newEntry);           first.prev = first;           first.next = first;       }       else {           DoubleLinkedNode node = new DoubleLinkedNode(newEntry);           node.prev = first.prev;           node.next = first;           first.prev.next = node;           first.prev = node;       }       size++;    }    @Override   public T removeFront() {       if (size == 0){           throw new EmptyQueueException();       }       if (size == 1){           T value = first.data;           clear();           return value;       }       else {           first.prev.next = first.next;           first.next.prev = first.prev;           T value = first.data;           first = first.next;           size--;           return value;       }    }   @Override   public T removeBack() {       if (size == 0){           throw new EmptyQueueException();       }       if (size == 1){           T value = first.data;           clear();           return value;       }       else {           DoubleLinkedNode node = first.prev;           T value = node.data;           node.prev.next = first;           first.prev = node.prev;           size--;           return value;       }    }   @Override   public T getFront() {       if (size == 0){           return null;       }       else {           return first.data;       }    }   @Override   public T getBack() {       if (size == 0){           return null;       }       else {           return first.prev.data;       }    }   @Override   public boolean isEmpty() {       return size == 0;    }    @Override   public void clear() {       first.next = null;       first.prev = null;       first = null;       size = 0;    }}